//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Cisst
{
    [Serializable]
    public class MtsIntervalStatisticsMsg : Message
    {
        public const string k_RosMessageName = "cisst_msgs/mtsIntervalStatistics";
        public override string RosMessageName => k_RosMessageName;

        public HeaderMsg header;
        //  average period 
        public double PeriodAvg;
        //  deviation on periodicity
        public double PeriodStdDev;
        //  min and max time between
        public double PeriodMin;
        public double PeriodMax;
        //  same 4 values for compute time
        public double ComputeTimeAvg;
        public double ComputeTimeStdDev;
        public double ComputeTimeMin;
        public double ComputeTimeMax;
        //  number of samples used to compute these status
        public long NumberOfSamples;
        //  number of overruns base on previous interval average
        public long NumberOfOverruns;
        //  time window covered by these stats
        public double StatisticsInterval;
        //  user data
        public long UserData;

        public MtsIntervalStatisticsMsg()
        {
            this.header = new HeaderMsg();
            this.PeriodAvg = 0.0;
            this.PeriodStdDev = 0.0;
            this.PeriodMin = 0.0;
            this.PeriodMax = 0.0;
            this.ComputeTimeAvg = 0.0;
            this.ComputeTimeStdDev = 0.0;
            this.ComputeTimeMin = 0.0;
            this.ComputeTimeMax = 0.0;
            this.NumberOfSamples = 0;
            this.NumberOfOverruns = 0;
            this.StatisticsInterval = 0.0;
            this.UserData = 0;
        }

        public MtsIntervalStatisticsMsg(HeaderMsg header, double PeriodAvg, double PeriodStdDev, double PeriodMin, double PeriodMax, double ComputeTimeAvg, double ComputeTimeStdDev, double ComputeTimeMin, double ComputeTimeMax, long NumberOfSamples, long NumberOfOverruns, double StatisticsInterval, long UserData)
        {
            this.header = header;
            this.PeriodAvg = PeriodAvg;
            this.PeriodStdDev = PeriodStdDev;
            this.PeriodMin = PeriodMin;
            this.PeriodMax = PeriodMax;
            this.ComputeTimeAvg = ComputeTimeAvg;
            this.ComputeTimeStdDev = ComputeTimeStdDev;
            this.ComputeTimeMin = ComputeTimeMin;
            this.ComputeTimeMax = ComputeTimeMax;
            this.NumberOfSamples = NumberOfSamples;
            this.NumberOfOverruns = NumberOfOverruns;
            this.StatisticsInterval = StatisticsInterval;
            this.UserData = UserData;
        }

        public static MtsIntervalStatisticsMsg Deserialize(MessageDeserializer deserializer) => new MtsIntervalStatisticsMsg(deserializer);

        private MtsIntervalStatisticsMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.PeriodAvg);
            deserializer.Read(out this.PeriodStdDev);
            deserializer.Read(out this.PeriodMin);
            deserializer.Read(out this.PeriodMax);
            deserializer.Read(out this.ComputeTimeAvg);
            deserializer.Read(out this.ComputeTimeStdDev);
            deserializer.Read(out this.ComputeTimeMin);
            deserializer.Read(out this.ComputeTimeMax);
            deserializer.Read(out this.NumberOfSamples);
            deserializer.Read(out this.NumberOfOverruns);
            deserializer.Read(out this.StatisticsInterval);
            deserializer.Read(out this.UserData);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.PeriodAvg);
            serializer.Write(this.PeriodStdDev);
            serializer.Write(this.PeriodMin);
            serializer.Write(this.PeriodMax);
            serializer.Write(this.ComputeTimeAvg);
            serializer.Write(this.ComputeTimeStdDev);
            serializer.Write(this.ComputeTimeMin);
            serializer.Write(this.ComputeTimeMax);
            serializer.Write(this.NumberOfSamples);
            serializer.Write(this.NumberOfOverruns);
            serializer.Write(this.StatisticsInterval);
            serializer.Write(this.UserData);
        }

        public override string ToString()
        {
            return "MtsIntervalStatisticsMsg: " +
            "\nheader: " + header.ToString() +
            "\nPeriodAvg: " + PeriodAvg.ToString() +
            "\nPeriodStdDev: " + PeriodStdDev.ToString() +
            "\nPeriodMin: " + PeriodMin.ToString() +
            "\nPeriodMax: " + PeriodMax.ToString() +
            "\nComputeTimeAvg: " + ComputeTimeAvg.ToString() +
            "\nComputeTimeStdDev: " + ComputeTimeStdDev.ToString() +
            "\nComputeTimeMin: " + ComputeTimeMin.ToString() +
            "\nComputeTimeMax: " + ComputeTimeMax.ToString() +
            "\nNumberOfSamples: " + NumberOfSamples.ToString() +
            "\nNumberOfOverruns: " + NumberOfOverruns.ToString() +
            "\nStatisticsInterval: " + StatisticsInterval.ToString() +
            "\nUserData: " + UserData.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
